{"version":3,"sources":["PersonalDataForm.js","App.js","serviceWorker.js","index.js"],"names":["PersonalDataForm","props","validateField","name","value","config","trim","length","nickName","email","match","field","position","setState","prevState","fieldTouched","state","fieldRequired","fieldValid","validateAllFields","valid","Object","entries","fieldValues","forEach","key","saveToLocalStorage","window","localStorage","setItem","JSON","stringify","openResults","e","personalDataWindow","open","userData","parse","getItem","message","document","body","innerHTML","submitPersonalDataForm","preventDefault","formSent","errorMsgs","bind","updateState","switchSelects","target","this","id","onChange","onClick","action","onSubmit","noValidate","className","type","onBlur","htmlFor","disabled","React","Component","App","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08c15eda.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class PersonalDataForm extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            formSent: false,\n            fieldValues: {\n                name: '',\n                nickName: '',\n                email: '',\n                field: '',\n                position: '',\n            },\n            fieldRequired: {\n                name: true,\n                nickName: false,\n                email: true,\n                field: true,\n                position: true,\n            },\n            fieldTouched:{\n                name: false,\n                nickName: false,\n                email: false,\n                field: false,\n                position: false,\n            },\n            fieldValid:{\n                name: false,\n                nickName: true,\n                email: false,\n                field: false,\n                position: false,\n            },\n            errorMsgs: {\n                name: 'Please fill in your name',\n                nickName: '',\n                email: 'Please use a correct e-mail address',\n                field: 'Please choose your field',\n                position: 'Please choose your position',\n            },\n        }\n        this.validateField = this.validateField.bind(this);\n        this.updateState = this.updateState.bind(this);\n        this.switchSelects = this.switchSelects.bind(this);\n    }\n    \n    \n    updateState (e) {\n        const {name, value} = e.target;\n        this.setState(prevState => ({\n            fieldValues: {\n                ...prevState.fieldValues,\n                        [name]: value\n            }\n        }))\n        this.validateField(name, value)\n        \n    }\n    \n    validateField = (name, value) => {\n        const config = {\n            \n                validationRules: {\n                    name:  value.trim().length, //most basic validation rule. checks if there's anything typed in the field\n                    nickName: true,\n                    email: value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i),\n                    field: value.trim().length,\n                    position: value.trim().length,\n                },\n        }\n        this.setState(prevState => ({\n            fieldTouched: {\n                ...prevState.fieldTouched,\n                        [name]: true\n            }\n        }))\n        \n        if(this.state.fieldRequired[name]){\n            \n            \n            if(config.validationRules[name]){\n\n                this.setState(prevState => ({\n                    fieldValid: { \n                        ...prevState.fieldValid,\n                        [name]: true\n                    }\n                }))\n                \n            } else {\n                \n                 this.setState(prevState => ({\n                    fieldValid: { \n                        ...prevState.fieldValid,\n                        [name]: false\n                    }\n                }))\n                \n            }\n            \n        }\n        \n    }\n    \n    validateAllFields = () =>{\n        let valid = true;\n        Object.entries(this.state.fieldValues).forEach(\n            ([key, value]) => this.validateField(key, value)\n        )\n        Object.entries(this.state.fieldValid).forEach(\n            ([key, value]) => {if (value === false){\n                valid = false\n            }\n        }\n        )\n        return valid;\n    }\n    \n    saveToLocalStorage = () => {\n        window.localStorage.setItem('PDFUser', JSON.stringify(this.state.fieldValues));\n    }\n    \n    openResults = (e) => {\n        const personalDataWindow = window.open(\"\", \"PersonalDataFormResults\")\n        let userData = JSON.parse(window.localStorage.getItem('PDFUser'));\n        let message = \"<ol>From Local Storage:<li>Name: \"+userData.name+\"</li><li>Nickname: \"+userData.nickName+\"</li><li>E-mail: \"+userData.email+\"</li><li>Field: \"+userData.field+\"</li><li>Position: \"+userData.position+\"</li></ol>\";\n       personalDataWindow.document.body.innerHTML = message;\n        \n    }\n    \n    \n    submitPersonalDataForm = (e) => {\n        e.preventDefault();\n        if(this.validateAllFields()){\n            this.setState(prevState => ({\n                    formSent: true\n                }))\n            this.saveToLocalStorage()\n        }\n    }\n    \n    switchSelects () {\n        switch(this.state.fieldValues.field){\n            case  'IT':\n                return (\n                    \n                        <select name=\"position\" id=\"position\" onChange={this.updateState}>\n                            <option value=\"\">{this.state.fieldValues.position ? 'Go back to Field' : 'Position'}</option>\n                            <option value=\"Front-end developer\">Front-end developer</option>\n                            <option value=\"Back-end developer\">Back-end developer</option>\n                            <option value=\"DevOps\">DevOps</option>\n                            <option value=\"Front-end developer\">Webmaster</option>\n                        </select>\n                    \n                );\n            case 'Product':\n                return (\n                        <select name=\"position\" id=\"position\" onChange={this.updateState}>\n                            <option value=\"\">{this.state.fieldValues.position ? 'Go back to Field' : 'Position'}</option>\n                            <option value=\"Product Owner\">Product Owner</option>\n                            <option value=\"UX Designer\">UX Designer</option>\n                            <option value=\"UI Designer\">UI Designer</option>\n                        </select>\n                    \n                );\n             case 'Content':\n                return (\n                        <select name=\"position\" id=\"position\" onChange={this.updateState}>\n                            <option value=\"\">{this.state.fieldValues.position ? 'Go back to Field' : 'Position'}</option>\n                            <option value=\"Junior Copywriter\">Junior Copywriter</option>\n                            <option value=\"Senior Copywriter\">Senior Copywriter</option>\n                        </select>\n                );\n\n            default:\n                return('');\n        }\n    }\n    \n    render() {\n        if (this.state.formSent) {\n            \n            return (\n                <div id=\"form-helper\"><ol>\n                    <li>Name: {this.state.fieldValues.name}</li>\n                    <li>Nickname: {this.state.fieldValues.nickName}</li>\n                    <li>E-mail: {this.state.fieldValues.email}</li>\n                    <li>Field: {this.state.fieldValues.field}</li>\n                    <li>Position: {this.state.fieldValues.position}</li>\n                </ol>\n                <button onClick={this.openResults}>view results in new Tab (Local Storage)</button></div>\n            )\n            \n        } else {\n            \n            return (\n                <div id=\"form-helper\">\n                    <form action=\"\" id=\"personal-data-form\" onSubmit={this.submitPersonalDataForm} noValidate>\n                        <div className={'row ' \n                                        + (this.state.fieldRequired.name && this.state.fieldTouched.name ?\n                                            (this.state.fieldValid.name ? \n                                                'success' : 'error')\n                                           : '')}>\n\n                            <input name=\"name\" type=\"text\" noValidate onBlur={this.updateState}/>\n                            <label className={this.state.fieldValues.name && 'filled'} htmlFor=\"name\">Name</label>\n\n                            {this.state.fieldRequired.name\n                             && this.state.fieldTouched.name \n                             && !this.state.fieldValid.name \n                             && <div className=\"error-message\">{this.state.errorMsgs.name}</div>}\n\n                        </div>\n\n                        <div className={'row '\n                                            + (this.state.fieldRequired.nickName && this.state.fieldTouched.nickName ? \n                                                (this.state.fieldValid.nickName ?\n                                                    'success' : 'error')\n                                               : '')}>\n\n                            <input name=\"nickName\" type=\"text\" noValidate onBlur={this.updateState}/>\n                            <label className={this.state.fieldValues.nickName && 'filled'} htmlFor=\"nickName\">Nickname</label>\n\n                            {this.state.fieldRequired.nickName \n                             && this.state.fieldTouched.nickName \n                             && !this.state.fieldValid.nickName \n                             && <div className=\"error-message\">{this.state.errorMsgs.nickName}</div>}\n                        </div>\n\n                        <div className={'row '\n                                            + (this.state.fieldRequired.email && this.state.fieldTouched.email ?\n                                                (this.state.fieldValid.email ?\n                                                    'success' : 'error')\n                                               : '')}>\n\n                            <input name=\"email\" type=\"email\" noValidate onBlur={this.updateState}/>\n                            <label className={this.state.fieldValues.email && 'filled'} htmlFor=\"email\">E-mail</label>\n\n                            {this.state.fieldRequired.email\n                             && this.state.fieldTouched.email \n                             && !this.state.fieldValid.email \n                             && <div className=\"error-message\">{this.state.errorMsgs.email}</div>}\n\n                        </div>\n                        <div className={'row '\n                                            + (this.state.fieldRequired.field && this.state.fieldTouched.field ? \n                                                (this.state.fieldValid.field ?\n                                                    'success' : 'error')\n                                               : '')}>\n\n                            <select name=\"field\" id=\"field\" onChange={this.updateState} disabled={this.state.fieldValues.position !== ''}>\n                                <option value=\"\">Field</option>\n                                <option value=\"IT\">IT</option>\n                                <option value=\"Product\">Product</option>\n                                <option value=\"Content\">Content</option>\n                            </select>\n\n                            {this.state.fieldRequired.field \n                             && this.state.fieldTouched.field \n                             && !this.state.fieldValid.field \n                             && <div className=\"error-message\">{this.state.errorMsgs.field}</div>}\n\n                        </div>\n                        {this.state.fieldValues.field && \n                        <div className={'row ' \n                                            + (this.state.fieldRequired.position && this.state.fieldTouched.position ?\n                                                (this.state.fieldValid.position ?\n                                                    'success' : 'error')\n                                               : '')}>\n\n                            {this.switchSelects()}\n\n                            {this.state.fieldRequired.position \n                             && this.state.fieldTouched.position \n                             && !this.state.fieldValid.position \n                             && <div className=\"error-message\">{this.state.errorMsgs.position}</div>}\n\n                        </div>\n                            }\n\n                        <input id=\"submit-button\" type=\"submit\" value=\"Submit\"/>\n                    </form>\n\n\n                    <ol>\n                        <li>Name: {this.state.fieldValues.name}</li>\n                        <li>Nickname: {this.state.fieldValues.nickName}</li>\n                        <li>E-mail: {this.state.fieldValues.email}</li>\n                        <li>Field: {this.state.fieldValues.field}</li>\n                        <li>Position: {this.state.fieldValues.position}</li>\n                    </ol>\n                </div>\n\n\n\n            )\n        }\n    }\n}","import React from 'react';\nimport './App.css';\nimport PersonalDataForm from './PersonalDataForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PersonalDataForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}